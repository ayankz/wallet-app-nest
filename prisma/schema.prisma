// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email       String        @unique
  hash        String
  hashRt      String?
  Transaction Transaction[]
  Card        Card[]

  @@map("users")
  debts Debt[]
}

model Transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type    TransactionType
  amount  Float
  comment String?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])

  cardId Int?
  card   Card? @relation(fields: [cardId], references: [id])

  @@map("transactions")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String          @unique
  type TransactionType

  transactions Transaction[]

  @@map("categories")
}

model Debt {
  id           Int        @id @default(autoincrement())
  amount       Float
  description  String?
  dueDate      DateTime
  status       DebtStatus @default(PENDING)
  proofFileUrl String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  userId Int
  user   User           @relation(fields: [userId], references: [id])

  counterparty String

  // Тип: я дал или я взял
  direction DebtDirection

  @@map("debts")
}

model Card {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  digits    String   @unique
  balance   Decimal  @default(0.0)
  type      CardType @default(VISA)

  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@map("cards")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum CardType {
  VISA
  MC
}

enum DebtStatus {
  PENDING
  PAID
  OVERDUE
}
enum DebtDirection {
  LENT   
  BORROWED 
}